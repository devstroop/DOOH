@inject Microsoft.Extensions.Localization.IStringLocalizer<CampaignScheduleEditor> L
<RadzenScheduler TItem="Server.Models.DOOHDB.CampaignSchedule" StartProperty="Start" EndProperty="End" TextProperty="Label" Data="@schedules" SelectedIndex="0"
                 SlotSelect=@OnSlotSelect AppointmentSelect=@OnScheduleSelect AppointmentRender=@OnScheduleRender
                 AppointmentMove=@OnScheduleMove Style="height: 640px" Date="@SelectedDate" SlotRender="@OnSlotRender">
    @* <RadzenDayView StartTime="@SelectedDate.TimeOfDay"></RadzenDayView> *@
    @* <RadzenWeekView StartTime="@SelectedDate.TimeOfDay"></RadzenWeekView> *@
    <RadzenMonthView></RadzenMonthView>
    <RadzenYearView StartMonth="@startMonth"></RadzenYearView>
    @* <RadzenYearPlannerView StartMonth="@startMonth"/> *@
    @* <RadzenYearTimelineView StartMonth="@startMonth"/> *@
</RadzenScheduler>


@code {
    [Parameter] public int CampaignId { get; set; }

    [Inject] protected DialogService DialogService { get; set; }

    [Inject] protected DOOHDBService DOOHDBService { get; set; }

    [Inject] protected NotificationService NotificationService { get; set; }

    [Inject] protected IJSRuntime JSRuntime { get; set; }

    private IEnumerable<DOOH.Server.Models.DOOHDB.CampaignSchedule> schedules;

    private int schedulesCount;

    private Month startMonth { get; set; } = (Month)DateTime.Today.Month;
    private DateTime SelectedDate { get; set; } = DateTime.Now;

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        var result = await DOOHDBService.GetCampaignSchedules(filter: $"CampaignId eq {CampaignId}");
        schedules = result.Value;
        schedulesCount = result.Count;
        Console.WriteLine($"Loaded {schedulesCount} schedules");
        StateHasChanged();
    }


    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(70,255,40,.2);";
        }

        // Highlight working hours (9-18)
        // if ((args.View.Text == "Week" || args.View.Text == "Day")) // && args.Start.Hour > 8 && args.Start.Hour < 19)
        // {
        //     args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        // }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        // Console Log, after Serialize
        // await JSRuntime.InvokeVoidAsync("console.log", args.Start.ToString("yyyy-MM-ddTHH:mm:ss"), args.End.ToString("yyyy-MM-ddTHH:mm:ss"));
        if (args.View.Text != "Year")
        {
            DOOH.Server.Models.DOOHDB.CampaignSchedule data = await DialogService.OpenAsync<CampaignScheduleValueEditor>("Add Schedule",
                new Dictionary<string, object> { { "CampaignId", CampaignId },{ "ScheduleId", 0 }, { "Start", args.Start }, { "End", args.End } });

            if (data != null)
            {
                data = await DOOHDBService.CreateCampaignSchedule(data);
                await LoadData();
            }
        }
    }

    async Task OnScheduleSelect(SchedulerAppointmentSelectEventArgs<DOOH.Server.Models.DOOHDB.CampaignSchedule> args)
    {
        if (args.Data == null)
        {
            return;
        }
        var data = await DialogService.OpenAsync<CampaignScheduleValueEditor>("Edit Schedule", new Dictionary<string, object> { { "CampaignId", CampaignId }, { "ScheduleId", args.Data.ScheduleId } });

        if (data != null)
        {
            // Update the appointment
            args.Data.Start = data.Start;
            args.Data.End = data.End;
            args.Data.Rotation = data.Rotation;
            args.Data.Label = data.Label;
        }

        await DOOHDBService.UpdateCampaignSchedule(args.Data.ScheduleId, args.Data);

        await LoadData();
    }

    void OnScheduleRender(SchedulerAppointmentRenderEventArgs<DOOH.Server.Models.DOOHDB.CampaignSchedule> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.Rotation == 0)
        {
            args.Attributes["style"] = "background: red";
        }
    }

    async Task OnScheduleMove(SchedulerAppointmentMoveEventArgs args)
    {
        var draggedAppointment = schedules.FirstOrDefault(x => x == args.Appointment.Data);

        if (draggedAppointment != null)
        {
            draggedAppointment.Rotation = draggedAppointment.Rotation;

            draggedAppointment.Start = draggedAppointment.Start + args.TimeSpan;

            draggedAppointment.End = draggedAppointment.End + args.TimeSpan;

            draggedAppointment.Label = draggedAppointment.Label;


            await DOOHDBService.UpdateCampaignSchedule(draggedAppointment.ScheduleId, draggedAppointment);

            await LoadData();
        }
    }
}
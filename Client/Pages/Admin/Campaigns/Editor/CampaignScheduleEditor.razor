@inject Microsoft.Extensions.Localization.IStringLocalizer<CampaignScheduleEditor> L
<RadzenRow>
    <RadzenColumn SizeMD="7" SizeLG="8" SizeXL="9">
        <RadzenScheduler TItem="Server.Models.DOOHDB.CampaignSchedule" StartProperty="Start" EndProperty="End" TextProperty="Label" Data="@Data" SelectedIndex="0"
                         SlotSelect="@OnSlotSelect" AppointmentSelect="@OnScheduleSelect" AppointmentRender="@OnScheduleRender"
                         AppointmentMove="@OnScheduleMove" Style="height: 640px" Date="@SelectedDate" SlotRender="@OnSlotRender">
            <RadzenMonthView></RadzenMonthView>
            <RadzenYearView StartMonth="@StartMonth"></RadzenYearView>
            <RadzenYearTimelineView StartMonth="@StartMonth"/>
        </RadzenScheduler>
    </RadzenColumn>
    <RadzenColumn SizeMD="5" SizeLG="4" SizeXL="3" Style="height: 640px; display: flex; flex-direction: column; overflow-y: auto; scroll-margin-top: 1rem">
        <RadzenDataList TItem="Server.Models.DOOHDB.CampaignSchedule" Data="@Data" WrapItems="true" Count="@Data.Count()">
            <Template>
                <CampaignScheduleTemplate Context="@context"></CampaignScheduleTemplate>
            </Template>
        </RadzenDataList>
    </RadzenColumn>
</RadzenRow>


@code {
    [Parameter] public int CampaignId { get; set; } = 0;
    [Parameter] public DateTime Min { get; set; } = DateTime.Today;
    [Parameter] public DateTime Max { get; set; } = DateTime.Today.AddDays(90);
    [Parameter] public IEnumerable<DOOH.Server.Models.DOOHDB.CampaignSchedule> Data { get; set; }
    [Parameter] public EventCallback<DOOH.Server.Models.DOOHDB.CampaignSchedule> Add { get; set; }
    [Parameter] public EventCallback<DOOH.Server.Models.DOOHDB.CampaignSchedule> Update { get; set; }
    [Parameter] public EventCallback<DOOH.Server.Models.DOOHDB.CampaignSchedule> Delete { get; set; }

    [Inject] protected DialogService DialogService { get; set; }

    [Inject] protected DOOHDBService DoohDbService { get; set; }

    [Inject] protected NotificationService NotificationService { get; set; }

    [Inject] protected IJSRuntime JsRuntime { get; set; }

    private Month StartMonth { get; set; } = (Month)DateTime.Today.Month;
    private DateTime SelectedDate { get; set; } = DateTime.Now;


    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(70,255,40,.2);";
        }

        // Highlight working hours (9-18)
        // if ((args.View.Text == "Week" || args.View.Text == "Day")) // && args.Start.Hour > 8 && args.Start.Hour < 19)
        // {
        //     args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        // }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        if (args.View.Text != "Year")
        {
            var start = args.Start;
            var end = args.End;

            if ((start < Min || start > Max) || (end < Min || end > Max) || (start > end))
            {
                NotificationService.Notify(NotificationSeverity.Error, "Invalid Date", "Selected date is out of campaign date range");
                return;
            }

            
            DOOH.Server.Models.DOOHDB.CampaignSchedule data = await DialogService.OpenAsync<CampaignScheduleValueEditor>("Add Schedule",
                new Dictionary<string, object> { { "CampaignId", CampaignId },{ "ScheduleId", 0 }, { "Start", args.Start }, { "End", args.End } });

            if (data != null)
            {
                Data = Data.Append(data);
                StateHasChanged();
                await Add.InvokeAsync(data);
            }
        }
    }

    async Task OnScheduleSelect(SchedulerAppointmentSelectEventArgs<DOOH.Server.Models.DOOHDB.CampaignSchedule> args)
    {
        if (args.Data == null)
        {
            return;
        }
        
        var start = args.Start;
        var end = args.End;

        if ((start < Min || start > Max) || (end < Min || end > Max) || (start > end))
        {
            NotificationService.Notify(NotificationSeverity.Error, "Cannot Edit", "Older schedules cannot be edited");
            return;
        }

        var data = await DialogService.OpenAsync<CampaignScheduleValueEditor>("Edit Schedule", new Dictionary<string, object> { { "CampaignId", CampaignId }, { "ScheduleId", args.Data.ScheduleId } });

        if (data != null)
        {
            args.Data.Start = data.Start;
            args.Data.End = data.End;
            args.Data.Rotation = data.Rotation;
            args.Data.Label = data.Label;
        }
        
        Data = Data.Where(x => x.ScheduleId != args.Data.ScheduleId).Append(args.Data);
        StateHasChanged();
        await Update.InvokeAsync(args.Data);
    }

    void OnScheduleRender(SchedulerAppointmentRenderEventArgs<DOOH.Server.Models.DOOHDB.CampaignSchedule> args)
    {
        if (args.Data.Rotation == 0)
        {
            args.Attributes["style"] = "background: red";
        }
    }

    async Task OnScheduleMove(SchedulerAppointmentMoveEventArgs args)
    {
        var draggedAppointment = Data.FirstOrDefault(x => x == args.Appointment.Data);

        if (draggedAppointment != null)
        {
            draggedAppointment.Rotation = draggedAppointment.Rotation;

            draggedAppointment.Start = draggedAppointment.Start + args.TimeSpan;

            draggedAppointment.End = draggedAppointment.End + args.TimeSpan;

            draggedAppointment.Label = draggedAppointment.Label;

            
            Data = Data.Where(x => x.ScheduleId != draggedAppointment.ScheduleId).Append(draggedAppointment);
            StateHasChanged();
            await Update.InvokeAsync(draggedAppointment);
        }
    }
}
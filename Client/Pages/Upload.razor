@using System.Text.Json
@using System.Text.RegularExpressions
@using DOOH.Server.Extensions
@using DOOH.Server.Models
<RadzenStack>
    <RadzenRow>
        <RadzenColumn>
            <RadzenUpload
                id="@($"ddUpload_{Id}")"
                class="dd-upload"
                Icon="upload"
                ChooseText="Drag and drop or browse and select a video file"
                Accept="video/mp4"
                Url="api/s3/multiple"
                Progress="@OnProgress"
                Auto="true"
                Multiple="true"
                Complete="@OnComplete"
                Error="@OnError"
                Visible="true"
                Disabled="@(IsUploading || IsProcessing)"/>
        </RadzenColumn>
    </RadzenRow>
    <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Success" @bind-Value="@Progress" Visible="@(IsUploading && !IsProcessing)"></RadzenProgressBar>
    <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Primary" ShowValue="false" Value="100" Mode="ProgressBarMode.Indeterminate" Visible="@IsProcessing"></RadzenProgressBar>
</RadzenStack>

<style>
    .dd-upload {
        left: 0;
        right: 0;
        top: 0;
        width: 100%;
    }

    .dd-upload .rz-fileupload-buttonbar .rz-fileupload-choose .rzi {
        font-size: 24px;
        align-self: center;
        color: #9f9f9f;
    }

    .dd-upload .rz-fileupload-buttonbar .rz-fileupload-choose {
        height: 180px;
        width: 100%;
        text-align: center;
        align-content: center;
        border-radius: 8px;
        border: 2px dashed #bfbfbf;
        background-color: #efefef;
        font-weight: 400;
    }
</style>
@code {
    private const string Id = "default";

    private bool IsUploading { get; set; } = false;
    private bool IsProcessing { get; set; } = false;
    
    private double Progress { get; set; } = 0;
    
    private void OnProgress(UploadProgressArgs args)
    {
        Progress = args.Progress;
        if (Progress > 0 && !IsUploading)
        {
            IsUploading = true;
        }
        if (Progress >= 100 && !IsProcessing)
        {
            IsUploading = false;
            IsProcessing = true;
        }
        StateHasChanged();
    }

    private async Task OnComplete(UploadCompleteEventArgs args)
    {
        var options = new JsonSerializerOptions
        {
            Converters = { new DictionaryStringStringConverter() }
        };

        try
        {
            var result = JsonSerializer.Deserialize<List<Dictionary<string, string>>>(args.RawResponse, options);
            var data = result.Select(MediaMetadata.FromDictionary).ToList();
            Dialog.Close(data);
        }
        catch (Exception e)
        {
            Notification.Notify(NotificationSeverity.Error, "Upload failed", e.Message);
        }
    }
    
    private async Task OnError(UploadErrorEventArgs args)
    {
        try
        {
            var errorMessage = args.Message;
            var regex = new Regex(@"Failed to read the request form. (.+)");
            var match = regex.Match(errorMessage);
            if (match.Success)
            {
                errorMessage = match.Groups[1].Value;
                // Show error message
                Notification.Notify(NotificationSeverity.Error, "Upload failed", errorMessage);
            }
        }
        catch (Exception e)
        {
            Notification.Notify(NotificationSeverity.Error, "Upload failed", e.Message);
        }
        finally
        {
            IsUploading = false;
            IsProcessing = false;
            Progress = 0;
            StateHasChanged();
        }
    }
    
    [Inject] private NotificationService Notification { get; set; }
    [Inject] private DialogService Dialog { get; set; }
}
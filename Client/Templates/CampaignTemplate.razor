@using DOOH.Client.Pages.Admin.Settings.Statuses
@using DOOH.Server.Models.DOOHDB
<RadzenColumn Size="12" Style="@Style">
    <RadzenRow>
        <RadzenColumn Size="12" SizeXS="12" SizeSM="12" SizeMD="4" SizeLG="3" SizeXL="2">
            <CarouselComponent Images="@Campaign.Advertisements.Select(x => x.Attachment.GetThumbnail())" Width="100%" Height="180px" Style="display: block; object-fit: cover; border:solid 1px #d5d5d5;" ShowHoverIcon="true" HoverIcon="play_arrow" OnHoverClick="@OnHoverClick" />
        </RadzenColumn>
        <RadzenColumn>
            <RadzenStack Style="height: 100%; width: 100%" JustifyContent="Radzen.JustifyContent.Stretch">
                <RadzenStack Orientation="Orientation.Horizontal" Style="width: 100%; display: block" JustifyContent="Radzen.JustifyContent.SpaceBetween" AlignItems="Radzen.AlignItems.Center" Wrap="FlexWrap.Wrap">
                    <RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="Radzen.AlignItems.Center" Gap="0.5rem">
                        <RadzenText Text="@($"{Campaign.CampaignId}")" class="rz-mb-0 rz-px-2 rz-py-1" Style="font-size: 12px; font-weight: 600; background-color: #dfdfdf; border-radius: 6px" />
                        <RadzenText Text="@Campaign.CampaignName" TextStyle="TextStyle.H5" class="rz-mb-0" Style="font-size: 20px;" />
                    </RadzenStack>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        <RadzenBadge Text="Draft" BadgeStyle="BadgeStyle.Light" Visible="@Campaign.IsDraft" class="rz-p-2" Style="font-size: 12px; font-weight: bold;" />
                        @* <RadzenDropDown TValue="Status" TextProperty="StatusName"  ValueProperty="StatusId" Data=@Statuses Change="@(args => StateHasChanged())" Style="width: 100%; max-width: 400px;" Name="DropDownChangeEvent" /> *@
                        @* <RadzenBadge Text="Daily" Variant="Variant.Outlined" BadgeStyle="BadgeStyle.Primary" class="rz-p-2" Style="font-size: 12px; font-weight: bold;" Visible="@(((BudgetType)Campaign.BudgetType) == BudgetType.Daily)" /> *@
                        <RadzenSplitButton ButtonStyle="ButtonStyle.Light" Icon="more_vert" Size="ButtonSize.Medium" Click="@SplitBtnClick">
                            <RadzenSplitButtonItem Text="Edit" Icon="edit" Style="font-size:12px;" />
                            <RadzenSplitButtonItem Text="Delete" Icon="delete" Style="font-size:12px;" />
                        </RadzenSplitButton>
                    </RadzenStack>
                </RadzenStack>
                <RadzenRow JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenColumn>
                        <RadzenStack Gap="0.5rem" JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Start">
                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Gap="0.5rem">
                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                                    <RadzenIcon Icon="date_range" Style="font-size: 16px" />
                                    <RadzenText Text="Date" TextStyle="TextStyle.Body2" class="rz-mb-0" />
                                </RadzenStack>
                                <RadzenText Text="@($"{Campaign.StartDate:d} to {(Campaign.EndDate != null ? $"{Campaign.EndDate:d}" : "Ongoing")}")" TextStyle="TextStyle.Body2" class="rz-mb-0" Style="font-weight: 500;" />
                            </RadzenStack>
                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Gap="1rem">
                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                                    <RadzenIcon Icon="currency_rupee" Style="font-size: 16px" />
                                    <RadzenText Text="Budget" TextStyle="TextStyle.Body2" class="rz-mb-0" />
                                </RadzenStack>
                                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="Radzen.AlignItems.Center" Wrap="FlexWrap.Wrap">
                                    <RadzenText Text="@($"{Campaign.Budget}")" TextStyle="TextStyle.Body2" class="rz-mb-0" Style="font-weight: bold;" />
                                    <RadzenText Text="@(Campaign.BudgetType == 2 ? "per day" : "total")" TextStyle="TextStyle.Caption" class="rz-mb-0 rz-px-2 rz-py-05" Style="font-size: 12px; font-weight: 500; border-radius: 4px; background-color: grey; color: #ffffff" />
                                </RadzenStack>
                            </RadzenStack>
                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem" @onclick="@OnLocationClick" Style="cursor: pointer;">
                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                                    <RadzenIcon Icon="location_on" Style="font-size: 16px" />
                                    <RadzenText Text="Locations" TextStyle="TextStyle.Body2" class="rz-mb-0" />
                                </RadzenStack>
                                <RadzenText Text="@($"{Campaign.CampaignAdboards.Count}")" TextStyle="TextStyle.Body2" class="rz-mb-0" Style="font-weight: 500;" />
                            </RadzenStack>
                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem">
                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                                    <RadzenIcon Icon="attach_file" Style="font-size: 16px" />
                                    <RadzenText Text="Ads" TextStyle="TextStyle.Body2" class="rz-mb-0" />
                                </RadzenStack>
                                <RadzenText Text="@($"{Campaign.Advertisements.Count}")" TextStyle="TextStyle.Body2" class="rz-mb-0" Style="font-weight: 500;" />
                                @* <RadzenButton Icon="info" Variant="Variant.Text" Size="ButtonSize.Small" Style="padding: 2px" /> *@
                            </RadzenStack>
                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem">
                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                                    <RadzenIcon Icon="browse_gallery" Style="font-size: 16px" />
                                    <RadzenText Text="Duration" TextStyle="TextStyle.Body2" class="rz-mb-0" />
                                </RadzenStack>
                                <RadzenText Text="@($"{Campaign.Advertisements.Select(x => Math.Round(x.Duration)).Sum()} sec")" TextStyle="TextStyle.Body2" class="rz-mb-0" Style="font-weight: 500;" />
                                @* <RadzenButton Icon="more" Variant="Variant.Text" Size="ButtonSize.ExtraSmall" /> *@
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenColumn>
                    <RadzenStack JustifyContent="Radzen.JustifyContent.End">
                        <RadzenFieldset Text="Analytics">
                            <RadzenStack Orientation="Orientation.Horizontal">
                                <RadzenStack Gap="0">
                                    <RadzenText Text="Rotation" class="rz-mb-0" TextStyle="TextStyle.Caption" />
                                    <RadzenText Text="15" TextStyle="TextStyle.H4" Style="font-weight: bold;" class="rz-mb-0" />
                                </RadzenStack>
                                <RadzenStack Gap="0">
                                    <RadzenText Text="Playtime" class="rz-mb-0" TextStyle="TextStyle.Caption" />
                                    <RadzenText Text="00:00:00" TextStyle="TextStyle.H4" Style="font-weight: bold;" class="rz-mb-0" />
                                </RadzenStack>
                            </RadzenStack>
                        </RadzenFieldset>
                    </RadzenStack>
                </RadzenRow>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
</RadzenColumn>
<style>
    .rz-menuitem {
        padding: 0.5rem;
    }

        .rz-menuitem .rz-menuitem-icon {
            font-size: 18px;
        }

    .rz-g > div, .rz-datalist-data > li {
        padding: 0px;
    }

    .rz-datalist-data {
        padding: 0px;
        margin-bottom: 0.5rem;
        margin-right: 0;
    }
</style>
@code {
    [Parameter] public DOOH.Server.Models.DOOHDB.Campaign Campaign { get; set; }
    [Parameter] public string Style { get; set; } = "width: 100%; padding: 1rem;";
    [Parameter] public EventCallback<DOOH.Server.Models.DOOHDB.Campaign> Edit { get; set; }
    [Parameter] public EventCallback<DOOH.Server.Models.DOOHDB.Campaign> Delete { get; set; }
    [Parameter] public IEnumerable<Status> Statuses { get; set; }

    [Inject] private DialogService DialogService { get; set; }
    [Inject] private NotificationService NotificationService { get; set; }

    private async Task OnLocationClick(MouseEventArgs args)
    {
        var markers = new List<Tuple<string, GoogleMapPosition>>();
        GoogleMapPosition firstPosition = null;
        foreach (var adboard in Campaign.CampaignAdboards)
        {
            var position = new GoogleMapPosition() { Lat = adboard?.Adboard?.Latitude ?? 0, Lng = adboard?.Adboard?.Longitude ?? 0 };
            markers.Add(new Tuple<string, GoogleMapPosition>($"#{adboard.AdboardId}", position));
            if (firstPosition == null)
            {
                firstPosition = position;
            }
        }



        var parameters = new Dictionary<string, object>();
        parameters.Add("Markers", markers);
        parameters.Add("Center", firstPosition);
        parameters.Add("Zoom", 12);
        var options = new DialogOptions() { Width = "800px", Height = "600px", Draggable = true, CloseDialogOnOverlayClick = true, CloseDialogOnEsc = true };
        await DialogService.OpenAsync<GoogleMapTemplate>("Map", parameters, options);
    }

    private void OnHoverClick(string image)
    {
        NotificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Info, Summary = "Image", Detail = image });
    }

    private async Task SplitBtnClick(RadzenSplitButtonItem item)
    {
        switch (item.Text)
        {
            case "Edit":
                await Edit.InvokeAsync(Campaign);
                break;
            case "Delete":
                await Delete.InvokeAsync(Campaign);
                break;
        }
    }
}

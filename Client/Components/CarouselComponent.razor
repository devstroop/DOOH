@using Radzen
@using Microsoft.AspNetCore.Components

<div class="carousel-container" id="@Id" style="@($"border-radius: {BorderRadius}; width: {Width}; height: {Height}; ")">
    <RadzenImage Path="@(CurrentIndex >= 0 ? (Images.ElementAtOrDefault(CurrentIndex) ?? string.Empty) : string.Empty)" alt="Image" Style="@($"border-radius: {BorderRadius}; width: 100%; height: 100%; {Style};")" Visible="@(CurrentIndex >= 0 && !String.IsNullOrEmpty(Images.ElementAtOrDefault(CurrentIndex)))"/>
    <RadzenImage Path="/images/no-image.png" alt="Image" Style="@($"border-radius: {BorderRadius}; width: 100%; height: 100%; {Style}; ")" Visible="!(CurrentIndex >= 0 && !String.IsNullOrEmpty(Images.ElementAtOrDefault(CurrentIndex)))"/>

    <div class="overlay">
        @Overlay
    </div>
</div>

<style>
    
    .overlay {
        position: absolute;
        top: 0;
        left: 0;
        bottom:  0;
        right: 0;
        /*width: 100%;*/
        /*height: 100%;*/
        /*background-color: rgba(0, 0, 0, 0.5);*/
        display: block;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 24px;
        font-weight: bold;
    }
    .carousel-container {
        position: relative;
        overflow: hidden;
        display: block;
        align-items: center;
        justify-content: center;
    }

    .nav-button {
        position: absolute;
        background-color: rgba(0, 0, 0, 0.5);
        color: white;
        border: none;
        border-radius: 50%;
        /*padding: 10px;*/
        opacity: 50%;
    }

    .left-button {
        left: 10px;
        bottom: 0;
        transform: translateY(-50%);
    }

    .right-button {
        right: 10px;
        bottom: 0;
        transform: translateY(-50%);
    }

    .carousel-container img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: opacity 0.5s ease-in-out;
    }
</style>

@code {
    [Parameter] public string Id { get; set; } = "default";
    [Parameter] public IEnumerable<string> Images { get; set; }
    [Parameter] public int CurrentIndex { get; set; } = 0;
    [Parameter] public string BorderRadius { get; set; } = "4px";
    [Parameter] public string Style { get; set; } = "";
    [Parameter] public string Height { get; set; } = "auto";
    [Parameter] public string Width { get; set; } = "auto";
    [Parameter] public string Class { get; set; }
    // [Parameter] public string HoverIcon { get; set; } = "visibility";
    // [Parameter] public bool ShowHoverIcon { get; set; } = false;
    // [Parameter] public Action<string> OnHoverClick { get; set; }
    [Parameter] public RenderFragment Overlay { get; set; }
    
    // private string CurrentImage => CurrentIndex >= 0 ? Images.ElementAtOrDefault(CurrentIndex) : null;


    // private string Height = "100%";
    // private string Width = "100%";

    // [Inject] protected Services.BrowserService BrowserService { get; set; }

    protected override Task OnInitializedAsync()
    {
        // BrowserService.OnViewportChanged += OnViewportChanged;
        return base.OnInitializedAsync();
    }


    // protected void OnViewportChanged(Services.WindowDimension dimension)
    // {
    //     if (dimension.Width >= 1024)
    //     {
    //         Height = "100%";
    //         Width = "auto";
    //         AspectRatio = "16:9";
    //     }
    //     else
    //     {
    //         Width = "100%";
    //         Height = "auto";
    //         AspectRatio = "9:16";
    //     }
    // }

    // private async Task HandleHoverIconClick()
    // {
    //     if (ShowHoverIcon && IsCurrentImageVisible)
    //     {
    //         OnHoverClick?.Invoke(CurrentImage);
    //     }
    // }

}
@using System;
@using System.Collections.Generic;
@using System.Net.Http;
@using DOOH.Server.Models.DOOHDB
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.JSInterop;
@using Radzen;
@using Radzen.Blazor;
@using System.Text.Json

<RadzenStack Wrap="FlexWrap.Wrap" Orientation="Orientation.Horizontal" Gap="0">
    @foreach (var image in Items ?? new List<string>())
    {
        <RadzenStack Style="width: 96px; height: 96px; position: relative;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
            <RadzenImage Path="@_validatedImages.GetValueOrDefault(image, "/images/warning.png")" Style="@Style" />
            <RadzenButton Class="delete-upload-image" Icon="close" Size="ButtonSize.ExtraSmall" ButtonStyle="ButtonStyle.Danger" Click="@((args) => DeleteImageClick(args, image))" />
            @* <RadzenProgressBarCircular class="progress-upload-image" Value="@progress" Size="ProgressBarCircularSize.Small" Visible="@(progress > 0 && progress < 100)" /> *@
        </RadzenStack>
    }
    <RadzenUpload Id="ddUpload" Icon="@uploadIcon" ChooseText="@uploadText" Url="upload/multiple" Progress="@OnProgress" Auto="true" Multiple="true" Complete="@OnComplete" Visible="@((Items?.Count ?? 0) < Max)" />
</RadzenStack>
<style>
    .progress-upload-image {
        position: absolute;
        top: 0;
        left: 0;
    }

    .delete-upload-image {
        cursor: pointer;
        position: absolute;
        top: 0;
        right: 0;
    }

    #ddUpload {
        left: 0;
    }

        #ddUpload .rz-fileupload-buttonbar .rz-fileupload-choose .rzi {
            font-size: 24px;
            align-self: center;
            color: #9f9f9f;
        }

        #ddUpload .rz-fileupload-buttonbar .rz-fileupload-choose {
            height: 80px;
            width: 80px;
            text-align: center;
            align-content: center;
            border-radius: 8px;
            border: 2px dashed #bfbfbf;
            background-color: #efefef;
            font-weight: 400;
        }
</style>
@code {
    [Parameter] public List<string> Items { get; set; }
    [Parameter] public Action<string> Add { get; set; }
    [Parameter] public Action<string> Delete { get; set; }
    [Parameter] public Action Refresh { get; set; }
    [Parameter] public int Max { get; set; } = 5;
    [Parameter] public string ObjectFit { get; set; } = "cover";

    [Inject] private IJSRuntime JSRuntime { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }
    [Inject] private HttpClient HttpClient { get; set; }

    private string Style => $"width: 84px; height: 84px; object-fit: {ObjectFit}; border-radius: 8px; margin: 6px; border: 1px solid #cfcfcf; box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.1);";

    private Dictionary<string, string> _validatedImages = new Dictionary<string, string>();
    private int progress = 0;
    private string uploadText => progress > 0 && progress < 100 ? $"{progress}%" : string.Empty;
    private string uploadIcon => progress > 0 && progress < 100 ? string.Empty : "add";

    protected override async Task OnInitializedAsync()
    {
        await ValidateImages();
    }

    protected override async Task OnParametersSetAsync()
    {
        await ValidateImages();
    }

    private async Task ValidateImages()
    {
        foreach (var image in Items ?? new List<string>())
        {
            var validImage = await GetValidImageAsync(image);
            _validatedImages[image] = validImage;
        }
        // Refresh?.Invoke();
    }

    private async Task<string> GetValidImageAsync(string image)
    {
        if (string.IsNullOrEmpty(image))
        {
            return "/images/no-image.jpg";
        }

        var absoluteUri = image.Trim().StartsWith("http") ? image : $"{NavigationManager.BaseUri}{image}";


        try
        {
            var response = await HttpClient.SendAsync(new HttpRequestMessage(HttpMethod.Head, absoluteUri));

            if (!response.IsSuccessStatusCode)
            {
                return "/images/warning.png";
            }
        }
        catch
        {
            return "/images/warning.png";
        }

        return image;
    }

    private async Task DeleteImageClick(MouseEventArgs args, string image)
    {
        Items = Items.Where(x => x != image).ToList();

        if (!image.Trim().StartsWith("http"))
        {
            try
            {
                await HttpClient.DeleteAsync($"/upload/delete{image}");
            }
            finally { }
        }

        Delete?.Invoke(image);

        // await ValidateImages();
    }

    private void OnProgress(UploadProgressArgs args)
    {
        progress = args.Progress;
    }

    private async Task OnComplete(UploadCompleteEventArgs args)
    {
        var urls = JsonSerializer.Deserialize<Dictionary<string, string[]>>(args.RawResponse);

        foreach (var url in urls["urls"])
        {
            // Items.Add(url);
            Add?.Invoke(url);
        }
        // await ValidateImages();
    }
}


<RadzenFieldset Text="Media" style="margin-bottom: 1rem">
    <RadzenUpload id="ddUpload" @ref="uploadDD"
                  ChooseText="Drag and drop to upload"
                  Auto="true"
                  Multiple="@Multiple"
                  Url="@Url"
                  InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select file" }})"
                  Progress="@Progress"
                  Change="@Change"
                  Complete="@Complete"
                  Error="@Error"
                  class="w-100"
                  Accept="@Accept">
    </RadzenUpload>
    <RadzenProgressBar @bind-Value="@Value" Visible="@ShowProgress" ProgressBarStyle="Radzen.ProgressBarStyle.Success" />
    <RadzenStack Orientation="Orientation.Horizontal">
        @foreach (var attachment in attachments)
        {
            <RadzenImage Path="@attachment.GetThumbnail()" style="width: 100px; height: 100px" />
        }
    </RadzenStack>
</RadzenFieldset>
<style>
    #ddUpload .rz-fileupload-buttonbar .rz-fileupload-choose {
        width: 100%;
        text-align: center;
        font-size: 16px;
        padding: 100px 0;
        border-radius: 0;
    }
</style>

@code {
    [Parameter]
    public double Value { get; set; }
    [Parameter]
    public string Accept { get; set; } = "video/*,image/*";
    [Parameter]
    public bool Multiple { get; set; } = false;
    [Parameter]
    public Action OnChange { get; set; }
    [Parameter]
    public Action<List<DOOH.Server.Models.DOOHDB.Attachment>> OnComplete { get; set; }
    [Parameter]
    public Action<string> OnError { get; set; }
    [Parameter]
    public Action<double> OnProgress { get; set; }
    [Parameter]
    public string BaseUri { get; set; }

    private string Url => Multiple ? $"{BaseUri}api/cdn/multiple" : $"{BaseUri}api/cdn/single";
    private bool ShowProgress { get; set; }
    private RadzenUpload uploadDD;
    List<DOOH.Server.Models.DOOHDB.Attachment> attachments = new List<DOOH.Server.Models.DOOHDB.Attachment>();

    private void Progress(UploadProgressArgs args)
    {
        Value = args.Progress;

        if (args.Progress == 100)
        {
            ShowProgress = false;
        }
        OnProgress?.Invoke(args.Progress);
        StateHasChanged();
    }

    private void Change(UploadChangeEventArgs args)
    {
        ShowProgress = true;
        OnProgress?.Invoke(0.0);
        StateHasChanged();
    }

    private void Complete(UploadCompleteEventArgs args)
    {
        ShowProgress = false;
        if (Multiple)
        {
            // Deserialize the args.JsonResponse as List<Attachment>
            var list = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DOOH.Server.Models.DOOHDB.Attachment>>(args.RawResponse);
            attachments.AddRange(list);
        }
        else
        {
            // Deserialize the args.RawResponse as Attachment
            var attachment = Newtonsoft.Json.JsonConvert.DeserializeObject<DOOH.Server.Models.DOOHDB.Attachment>(args.RawResponse);
            attachments.Add(attachment);
        }
        OnComplete?.Invoke(attachments);
        StateHasChanged();
    }

    private void Error(UploadErrorEventArgs args)
    {
        ShowProgress = false;
        Value = 0;
        OnError?.Invoke(args.Message);
        StateHasChanged();
    }
}

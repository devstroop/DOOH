@using System;
@using System.Collections.Generic;
@using System.Net.Http;
@using DOOH.Server.Models.DOOHDB
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.JSInterop;
@using Radzen;
@using Radzen.Blazor;

<RadzenStack Wrap="FlexWrap.Wrap" Orientation="Orientation.Horizontal" Gap="0">
    @* <RadzenStack Style="width: 96px; height: 96px; position: relative;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
    <RadzenImage Path="/images/warning.png" Style="width: 84px; height: 84px; object-fit: cover; border-radius: 8px; margin: 6px; border: 1px solid #cfcfcf; box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.1);" />
    <RadzenButton Class="delete-upload-image" Icon="close" Size="ButtonSize.ExtraSmall" ButtonStyle="ButtonStyle.Danger" />
    </RadzenStack> *@

    @foreach (var image in Images ?? new List<AdboardImage>())
    {
        <RadzenStack Style="width: 96px; height: 96px; position: relative;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
            <RadzenImage Path="@ValidatedImages.GetValueOrDefault(image.Image, "/images/warning.png")" Style="width: 84px; height: 84px; object-fit: cover; border-radius: 8px; margin: 6px; border: 1px solid #cfcfcf; box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.1);" />
            <RadzenButton Class="delete-upload-image" Icon="close" Size="ButtonSize.ExtraSmall" ButtonStyle="ButtonStyle.Danger" Click="@((args) => DeleteImageClick(args, image.Image))" />
        </RadzenStack>
    }
    <RadzenUpload Id="ddUpload" Icon="add" ChooseText="@uploadText" Url="upload/multiple" Progress="@OnProgress" Auto="true" Multiple="true" Complete="@OnComplete" />
</RadzenStack>
<style>
    .delete-upload-image {
        cursor: pointer;
        position: absolute;
        top: 0;
        right: 0;
    }

    #ddUpload {
        left: 0;
    }

        #ddUpload .rz-fileupload-buttonbar .rz-fileupload-choose .rzi {
            font-size: 24px;
            align-self: center;
            color: #9f9f9f;
        }

        #ddUpload .rz-fileupload-buttonbar .rz-fileupload-choose {
            height: 80px;
            width: 80px;
            text-align: center;
            align-content: center;
            border-radius: 8px;
            border: 2px dashed #bfbfbf;
            background-color: #efefef;
            font-weight: 400;
        }
</style>
@code {
    [Parameter] public ICollection<AdboardImage> Images { get; set; }
    [Parameter] public Action<ICollection<AdboardImage>> Change { get; set; }
    private Dictionary<string, string> ValidatedImages = new Dictionary<string, string>();
    private int progress = 0;
    private string uploadText => progress > 0 && progress < 100 ? $"{progress}%" : string.Empty;

    [Inject] private IJSRuntime JSRuntime { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }
    [Inject] private HttpClient HttpClient { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await ValidateImages();
    }

    private async Task ValidateImages()
    {
        foreach (var image in Images ?? new List<AdboardImage>())
        {
            var validImage = await GetValidImageAsync(image.Image);
            ValidatedImages[image.Image] = validImage;
        }
    }

    private async Task<string> GetValidImageAsync(string image)
    {
        if (string.IsNullOrEmpty(image))
        {
            return "/images/no-image.jpg";
        }

        var absoluteUri = image.Trim().StartsWith("http") ? image : $"{NavigationManager.BaseUri}{image}";

        try
        {
            var response = await HttpClient.SendAsync(new HttpRequestMessage(HttpMethod.Head, absoluteUri));

            if (!response.IsSuccessStatusCode)
            {
                return "/images/warning.png";
            }
        }
        catch
        {
            return "/images/warning.png";
        }

        return image;
    }

    private async Task DeleteImageClick(MouseEventArgs args, string image)
    {
        Images = Images.Where(x => x.Image != image).ToList();
        ValidatedImages.Remove(image);
        Change?.Invoke(Images);
    }

    private void OnProgress(UploadProgressArgs args)
    {
        progress = args.Progress;
    }

    private async Task OnComplete(UploadCompleteEventArgs args)
    {
        // Console log 'args.RawResponse'
        await JSRuntime.InvokeVoidAsync("console.log", args.RawResponse);
// progress = 0;
//         foreach (var file in args.RawResponse)
//         {
//             Images.Add(new AdboardImage { Image = file });
//         }

        await ValidateImages();
        Change?.Invoke(Images);
    }
}

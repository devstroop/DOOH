@using Microsoft.JSInterop

@inject IJSRuntime JSRuntime
@if (Visible)
{
    <div class="image-container">
        @if (isImageLoaded && isValidImage)
        {
            <RadzenImage Path="@ImageUrl" Style="@Style" />
        }
        else
        {
            <RadzenImage Path="@DefaultImageUrl" Style="@Style" />
        }
    </div>
}

@code {
    [Parameter]
    public string DefaultImageUrl { get; set; }

    [Parameter]
    public string ImageUrl { get; set; }

    [Parameter]
    public string Style { get; set; }

    [Parameter]
    public bool Visible { get; set; } = true;

    private bool isImageLoaded = false;
    private bool isValidImage = false;



    protected override async Task OnParametersSetAsync()
    {
        isValidImage = await CheckImageUrlAsync(ImageUrl ?? string.Empty);
        isImageLoaded = true;
        StateHasChanged();
    }

    private async Task<bool> CheckImageUrlAsync(string url)
    {
        try
        {
            return await JSRuntime.InvokeAsync<bool>("checkImage", url);
        }
        catch
        {
            return false;
        }
    }
}
